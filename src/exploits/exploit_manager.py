import logging
from typing import List, Dict
from metasploit.msfrpc import MsfRpcClient


class ExploitManager:
    """
    ExploitManager class interfaces with Metasploit to search and execute exploits.
    """

    def __init__(self, msf_password: str, host: str = "127.0.0.1", port: int = 55553):
        """
        Initialize the ExploitManager with Metasploit RPC client.

        Args:
            msf_password (str): Metasploit RPC password.
            host (str): Metasploit RPC server host. Defaults to 127.0.0.1.
            port (int): Metasploit RPC server port. Defaults to 55553.
        """
        try:
            self.client = MsfRpcClient(msf_password, server=host, port=port)
            self.logger = logging.getLogger(__name__)
            self.logger.info("Connected to Metasploit RPC server.")
        except Exception as e:
            self.logger.error(f"Failed to connect to Metasploit: {e}")
            raise ConnectionError("Could not connect to Metasploit RPC server.")

    def search_exploits(self, service: str) -> List[Dict]:
        """
        Search for available exploits related to a specific service.

        Args:
            service (str): Service name (e.g., 'smb').

        Returns:
            List[Dict]: List of exploits matching the service.
        """
        try:
            exploits = self.client.modules.exploits
            matching_exploits = []
            for exploit in exploits:
                if service.lower() in exploit.lower():
                    module = self.client.modules.use("exploit", exploit)
                    matching_exploits.append({
                        "name": exploit,
                        "description": module.description,
                        "rank": module.rank,
                    })
            return matching_exploits
        except Exception as e:
            self.logger.error(f"Error searching exploits for service {service}: {e}")
            return []

    def run_exploit(self, exploit_name: str, target: str, options: Dict) -> bool:
        """
        Execute an exploit against a target.

        Args:
            exploit_name (str): Name of the exploit module.
            target (str): Target IP address or hostname.
            options (Dict): Additional options for the exploit.

        Returns:
            bool: True if the exploit execution is successful, otherwise False.
        """
        try:
            exploit = self.client.modules.use("exploit", exploit_name)
            exploit["RHOSTS"] = target
            for option, value in options.items():
                exploit[option] = value

            self.logger.info(f"Running exploit {exploit_name} on target {target}")
            result = exploit.execute()
            return result.get("job_id") is not None
        except Exception as e:
            self.logger.error(f"Failed to run exploit {exploit_name}: {e}")
            return False
